# Docker Compose for Playwright MCP Server with Redis and monitoring
version: '3.8'

services:
  playwright-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: playwright-mcp-server
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - AUTH_REQUIRED=true
      - MAX_BROWSERS=10
      - MAX_CONTEXTS_PER_BROWSER=5
      - MAX_PAGES_PER_CONTEXT=10
      - SESSION_TIMEOUT=1800000
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60000
    depends_on:
      - redis
    volumes:
      - playwright-data:/app/data
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
    networks:
      - playwright-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  redis:
    image: redis:7-alpine
    container_name: playwright-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - playwright-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Optional: Redis Insight for Redis monitoring
  redis-insight:
    image: redislabs/redis-insight:latest
    container_name: playwright-redis-insight
    ports:
      - "8001:8001"
    environment:
      - REDIS_HOSTS=redis:redis:6379
    depends_on:
      - redis
    networks:
      - playwright-network
    profiles:
      - monitoring

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: playwright-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - playwright-network
    profiles:
      - monitoring

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: playwright-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - playwright-network
    profiles:
      - monitoring

  # Optional: Load balancer for horizontal scaling
  nginx:
    image: nginx:alpine
    container_name: playwright-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - playwright-mcp-server
    networks:
      - playwright-network
    profiles:
      - production

volumes:
  playwright-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  playwright-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16